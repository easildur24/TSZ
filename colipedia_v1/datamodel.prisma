type SchoolDetailsItem {
	id: ID! @unique
	schoolId: String! @unique
	overview: Overview 
	images: [String]
	admission: Admission 
	academics: Academics 
	cost: Cost 
	demographics: Demographics 
	geography: Geography 
}

type Overview {
   	id: ID! @unique
	name: String!
	description: String
	notableRankings: [Ranking] 
	badges: [Badge] 
	url: String
	menOnly: Boolean
	womenOnly: Boolean
	operating: Boolean
	onlineOnly: Boolean
	deadline: DateTime
    	location: Location
	system: System 
}

type Ranking {
        id: ID! @unique
	name: String
	rank: Int
}

# if a value is used only for rendering a badge, its logic will be in the resolver instead of FE. e.g religiousAffiliation 
type Badge {
    	id: ID! @unique
	tooltip: String
	url: String
}

type Location {
        id: ID! @unique
	latitude: Float
	longitude: Float
	state: String
	city: String
	zip: String
}

enum System {
	SEMESTER
	QUARTER
}

type Admission {
    	id: ID! @unique
	acceptanceRate: Float
	actScores: ActScores 
	satScores: SatScores 
	toeflScores: ToeflScores
	ieltsScores: IeltsScores
	earlyDecisionDeadline: DateTime
	regularDeadline: DateTime
	schoolResponseDeadline: DateTime
	studentResponseDeadline: DateTime
}

type ToeflScores {
	id: ID! @unique
	sourceUrl: String
	min: Int
}

type IeltsScores {
	id: ID! @unique
	sourceUrl: String
	min: Int
}

type ActScores {
        id: ID! @unique
	sourceUrl: String
	percentile25th: ActScoresTemplate @relation(name:"ActPercentile25")
	mid: ActScoresTemplate @relation(name:"ActMid")
	percentile75th: ActScoresTemplate @relation(name:"ActPercentile75") 
} 

type ActScoresTemplate {
  	id: ID! @unique
	writing: Int 
	english: Int
	math: Int
	cumulative: Int
}

type SatScoresTemplate {
    	id: ID! @unique
	reading: Int
	writing: Int
	math: Int
}

type SatScores {
   	id: ID! @unique
    	sourceUrl: String
	percentile25th: SatScoresTemplate @relation(name:"SatPercentile25") 
	mid: SatScoresTemplate @relation(name:"SatMid") 
	percentile75th: SatScoresTemplate @relation(name:"SatPercentile75") 
} 

type Academics {
    	id: ID! @unique
	majors: [major] 
	colleges: [college] 
}

type major {
    	id: ID! @unique
	name: String
	rank: Int
}

type college  {
    	id: ID! @unique
	name: String
	rank: Int
}

type Cost  {
    	id: ID! @unique
	sourceUrl: String
	tuitionUndergrad: Int
	tuitionGrad: Int
}

type Demographics  {
    	id: ID! @unique
	numStudents: Int
	numUndergraduates: Int
	numGraduates: Int
}

type Geography  {
    	id: ID! @unique
	location: Location 
}

input SchoolListInput {
	sortBy: SortByColumn
	offset: Int = 0
	limit: Int = 20
}

enum SortByColumn {
	US_RANK
	SAT
	ACT
	NUM_STUDENTS
	TOEFL
}

type SchoolListItem {
    	id: ID! @unique
    	schoolId: String! @unique
	name: String
	usRanking: Ranking 
	badges: [Badge] 
	thumbnail: String
	acceptanceRate: Float
	actScores: ActScores 
	satScores: SatScores 
	toeflScores: ToeflScores
	regularDeadline: DateTime
	religion: String
}

type SchoolSuggestion {
    	id: ID! @unique
	names: [String]
}

type SchoolRecommendation {
    	id: ID! @unique
	names: [String]
}

